from venv import create

import telebot
from telebot import types
from telebot.types import ReactionTypeEmoji
import random
from datetime import datetime
import qrcode
from io import BytesIO
from deep_translator import GoogleTranslator
import Calculator



bot_token = '7887163796:AAEo1LHI3yySB-EmLwm-HU3l6q8DyCw2VvY'
bot = telebot.TeleBot(bot_token)


@bot.message_handler(commands=['start'])
def start_command(message):
    if name:
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {name}! "
                                          f"–†–∞–¥ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å!")
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è,"
                                          "–Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /name")

@bot.message_handler(commands=['qr'])
def generate_qr(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞")

    bot.register_next_step_handler(message, create_qr)


def create_qr(message):
    text = message.text
    qr = qrcode.make(text)
    buffer = BytesIO()
    qr.save(buffer, format="PNG")
    buffer.seek(0)
    bot.send_photo(message.chat.id, buffer, caption="–í–æ—Ç –≤–∞—à QR-–∫–æ–¥!")


@bot.message_handler(commands=['translate'])
def translate_text(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')
    bot.register_next_step_handler(message, perform_translation)


def perform_translation(message):
    text = message.text
    translator = GoogleTranslator(source='auto')
    translated = translator.translate(text)

    bot.send_message(message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥: {translated}")

@bot.message_handler(commands=['calculator'])
def calculator_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    bot.register_next_step_handler(message, calculator_result)

def calculator_result(message):
    expression = message.text
    try:
        result = eval(expression)
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception :
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")

@bot.message_handler(commands=['game'])
def start_game(message):
    global random_number
    random_number = random.randint(1, 10)

    bot.send_message(message.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")
    bot.register_next_step_handler(message, guess_number)


def guess_number(message):
    global random_number
    try:
        guess = int(message.text)
        if guess == random_number:
            bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã —É–≥–∞–¥–∞–ªüéâ \n—ç—Ç–æ –±—ã–ª–æ —á–∏—Å–ª–æ {random_number}")
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–≥–∞–¥–∞–ª –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!üò¢")
            bot.register_next_step_handler(message, guess_number)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 !!!üò§")
        bot.register_next_step_handler(message, guess_number)

@bot.message_handler(commands=['photo'])
def send_photo(message):
    with open('images/Era.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo=photo, caption="–í–æ—Ç —Ç–µ–±–µ —Ñ–æ—Ç–æ —Å –º–æ–µ–π –ø–∞–º—è—Ç–∏")


@bot.message_handler(content_types=["sticker"])
def get_sticker_id(message):
    sticker_id = message.sticker.file_id

    bot.send_message(message.chat.id, f"ID –≤–∞—à–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞: {sticker_id}")


@bot.message_handler(commands=['sticker'])
def send_sticker(message):
    sticker_id = "CAACAgIAAxkBAAIFs2dT380dSLBmP_B_R_-mti55RUvQAAJgVAAC-W-ASbABMD0-7eMhNgQ"
    bot.send_sticker(message.chat.id, sticker_id)


@bot.message_handler(commands=['time'])
def send_time(message):
    current_time = datetime.now().strftime('%H:%M:%S')

    bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –≤—Ä–µ–º—è: {current_time}")
    bot.set_message_reaction(message.chat.id, message.id, [ReactionTypeEmoji('ü´°')], is_big=False)


@bot.message_handler(commands=['reverse'])
def reverse_text(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–ª–æ–≤–æ —è –µ–≥–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É!")
    bot.register_next_step_handler(message, reverse_handler)


def reverse_handler(message):
    reversed_text = message.text[::-1]
    bot.send_message(message.chat.id, f"–í–∞—à —Ç–µ–∫—Å—Ç –Ω–∞–æ–±–æ—Ä–æ—Ç:\n{str(reversed_text).lower()}")


@bot.message_handler(commands=['reset'])
def reset_data(message):
    global name, surname, age
    name, surname, age = '', '', 0
    bot.send_message(message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /name, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")


@bot.message_handler(commands=['info'])
def info_command(message):
    if name and surname and age:
        bot.send_message(message.chat.id, f"–í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –æ —Ç–µ–±–µ: "
                                          f"\n–ò–º—è: {name}\n–§–∞–º–∏–ª–∏—è: {surname}"
                                          f"\n–í–æ–∑—Ä–∞—Å—Ç: {age}")
    else:
        bot.send_message(message.chat.id, "–Ø –ø–æ–∫–∞ –º–∞–ª–æ –∑–Ω–∞—é –æ —Ç–µ–±–µ!"
                                          "–Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /name "
                                          "—á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è")


random_number = 0
name = ''
surname = ''
age = 0


@bot.message_handler(content_types=['text'])
def start(message):
    if message.text == '/name':
        bot.send_message(message.from_user.id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /name")


def get_name(message):
    global name
    name = message.text
    bot.send_message(message.from_user.id, "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")
    bot.register_next_step_handler(message, get_surname)


def get_surname(message):
    global surname
    surname = message.text
    bot.send_message(message.from_user.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(message, get_age)
    bot.set_message_reaction(message.chat.id, message.id, [ReactionTypeEmoji('üëç')], is_big=False)


def get_age(message):
    global age
    while age == 0:
        try:
            age = int(message.text)
        except Exception:
            bot.send_message(message.chat.id, "–¶–∏—Ñ—Ä–∞–º–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
            break
    keyboard = types.InlineKeyboardMarkup()  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
    keyboard.add(key_yes)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
    keyboard.add(key_no)
    question = f'–¢–µ–±–µ {str(age)} –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç {name}, –∞ —Ñ–∞–º–∏–ª–∏—è {surname}?'
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥‚Ä¶
        bot.send_message(call.message.chat.id, '–•–æ—Ä–æ—à–æ —è —É —Å–µ–±—è –∑–∞–ø–∏—Å–∞–ª!!!')

    elif call.data == "no":
        bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏ —Ç–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥—É /name üò≤üôÇ‚Äç‚ÜîÔ∏èüòá')


bot.polling(non_stop=True, interval=0)

